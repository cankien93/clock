{"version":3,"sources":["Little-Girl-Laughing-A1.mp3","MyClock.js","MyTimer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyClock","state","date","Date","this","timeID","setInterval","tick","clearInterval","setState","className","getHours","toLocaleTimeString","React","Component","MyTimer","startTimer","timerID","tickTimer","run","stopTimer","resetTimer","minute","second","onClick","style","color","src","sound","autoPlay","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,qD,mKC4C1BC,G,uDAxCb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTC,KAAO,IAAIC,MAHF,E,gEAOO,IAAD,OACjBC,KAAKC,OAASC,aAAa,kBACzB,EAAKC,SAAQ,O,6CAIfC,cAAcJ,KAAKC,U,6BAKnBD,KAAKK,SAAS,CACZP,KAAM,IAAIC,S,+BAOV,OACE,yBAAKO,UAAU,OACZN,KAAKH,MAAMC,KAAKS,YAAY,GAC1B,kDACAP,KAAKH,MAAMC,KAAKS,WAAW,IAAMP,KAAKH,MAAMC,KAAKS,YAAY,GAC7D,oDACA,kDACH,4BAAKP,KAAKH,MAAMC,KAAKU,2B,GAlCXC,IAAMC,Y,gBCwFXC,E,kDAvFb,aAAc,IAAD,8BACX,gBAQFC,WAAa,WACX,EAAKC,QAAUX,aAAa,kBAC1B,EAAKY,cAAa,KAEpB,EAAKT,SAAS,CACVU,IAAK,QAdE,EAqCbC,UAAU,WACNZ,cAAc,EAAKS,SACnB,EAAKR,SAAS,CACVU,IAAI,SAxCC,EA4CbE,WAAa,WACT,EAAKZ,SAAS,CACVa,OAAQ,EACRC,OAAQ,IAEZf,cAAc,EAAKS,SACnB,EAAKR,SAAS,CACVU,IAAI,SAjDV,EAAKlB,MAAM,CACTsB,OAAS,EACTD,OAAS,EACTH,IAAK,OALI,E,wDAqBY,IAApBf,KAAKH,MAAMsB,OACW,IAApBnB,KAAKH,MAAMqB,OACZd,cAAcJ,KAAKa,SAEnBb,KAAKK,SAAS,CACZc,OAAQ,GACRD,OAAQlB,KAAKH,MAAMqB,OAAQ,IAI/BlB,KAAKK,SAAS,CACZc,OAAQnB,KAAKH,MAAMsB,OAAS,M,+BAwBzB,IAAD,EACyBnB,KAAKH,MAA3BqB,EADH,EACGA,OAAQC,EADX,EACWA,OAAQJ,EADnB,EACmBA,IACvB,OACE,yBAAKT,UAAU,MACb,4BAAKY,EAAL,MAAgBlB,KAAKH,MAAMsB,QAElB,QAARJ,EACI,4BAAQK,QAAUpB,KAAKY,YAAvB,SACA,4BAAQS,MAAO,CAACC,MAAM,YAAtB,SAGI,OAARP,EACI,4BAAQK,QAAUpB,KAAKgB,WAAvB,QACA,4BAAQK,MAAO,CAACC,MAAM,YAAtB,QAGI,OAARP,EACI,4BAAQK,QAAUpB,KAAKiB,YAAvB,SACA,4BAAQI,MAAO,CAACC,MAAM,YAAtB,SAGO,IAAXJ,GAA2B,IAAXC,EACZ,6BAAK,2BAAOI,IAAKC,IAAOC,UAAQ,KAChC,mC,GAhFKhB,IAAMC,WCiBbgB,E,uKAVT,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GARQjB,IAAMC,WCOJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.98b50103.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Little-Girl-Laughing-A1.d2d9d8e7.mp3\";","import React from 'react';\r\nimport './App.css';\r\n\r\nclass MyClock extends React.Component {\r\n    constructor(){\r\n      super();\r\n      this.state={\r\n        date : new Date()\r\n      }\r\n    }\r\n  \r\n    componentDidMount(){\r\n      this.timeID = setInterval( ()=>\r\n        this.tick(), 1000\r\n      )\r\n    }\r\n    componentWillUnmount(){\r\n      clearInterval(this.timeID);\r\n  \r\n    }\r\n  \r\n    tick(){\r\n      this.setState({\r\n        date: new Date(),\r\n      })\r\n    }\r\n  \r\n\r\n    render(){\r\n  \r\n        return (\r\n          <div className='App'>\r\n            {this.state.date.getHours()>=19\r\n              ?<p>Good evening, Kien </p>\r\n              :this.state.date.getHours()<19 && this.state.date.getHours()>=13\r\n              ?<p>Good afternoon, Kien </p>\r\n              :<p>Good morning, Kien </p>}\r\n            <h1>{this.state.date.toLocaleTimeString()}</h1>\r\n          </div>\r\n        )\r\n    }\r\n  \r\n  }\r\n  \r\n  export default MyClock;","import React from 'react';\r\nimport sound from './Little-Girl-Laughing-A1.mp3'\r\n\r\nclass MyTimer extends React.Component {\r\n    constructor(){\r\n      super();\r\n      this.state={\r\n        second : 0,\r\n        minute : 2,\r\n        run: 'off'\r\n      }\r\n    }\r\n  \r\n    startTimer = ()=>{\r\n      this.timerID = setInterval( ()=>\r\n        this.tickTimer(), 1000\r\n      );\r\n      this.setState({\r\n          run: 'on'\r\n      })\r\n    }\r\n  \r\n  \r\n    tickTimer(){\r\n  \r\n      if(this.state.second===0){\r\n        if(this.state.minute===0){\r\n          clearInterval(this.timerID);\r\n        } else{\r\n          this.setState({\r\n            second: 59,\r\n            minute: this.state.minute -1\r\n          })\r\n        }\r\n      }else{\r\n        this.setState({\r\n          second: this.state.second - 1\r\n        })\r\n      }\r\n    }\r\n    \r\n    stopTimer=()=>{\r\n        clearInterval(this.timerID);\r\n        this.setState({\r\n            run:'off'\r\n        })\r\n    }\r\n    \r\n    resetTimer = ()=>{\r\n        this.setState({\r\n            minute: 2,\r\n            second: 0\r\n        });\r\n        clearInterval(this.timerID)\r\n        this.setState({\r\n            run:'off'\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        const {minute, second, run}= this.state;\r\n        return (\r\n          <div className='tc'>\r\n            <h2>{minute} : {this.state.second}</h2>\r\n          \r\n            {run === 'off'\r\n                ?<button onClick= {this.startTimer}>Start</button>\r\n                :<button style={{color:'#dbcfc1'}}>Start</button>\r\n            }\r\n\r\n            {run === 'on'\r\n                ?<button onClick= {this.stopTimer}>Stop</button>\r\n                :<button style={{color:'#dbcfc1'}}>Stop</button>\r\n            }\r\n            \r\n            {run === 'on'\r\n                ?<button onClick= {this.resetTimer}>Reset</button>\r\n                :<button style={{color:'#dbcfc1'}}>Reset</button>\r\n            }\r\n\r\n            {minute === 0 && second === 0 \r\n                ?<div><audio src={sound} autoPlay/></div>\r\n                :<div></div>\r\n            }\r\n          </div>\r\n        )\r\n    }\r\n  \r\n  }\r\n  \r\n  export default MyTimer;","import React from 'react';\r\nimport './App.css';\r\nimport MyClock from './MyClock';\r\nimport MyTimer from './MyTimer';\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n  render(){\r\n\r\n      return (\r\n        <div>\r\n          <MyClock />\r\n          <MyTimer />\r\n        </div>\r\n      )\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}